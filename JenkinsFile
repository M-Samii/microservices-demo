pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_REPO = "mahsamii"
        SNYK_TOKEN = credentials('snyk-token')
        GCP_PROJECT_ID = "devops-project-465114" // replace with your project ID
        COSIGN_KEY = "projects/devops-project-465114/locations/global/keyRings/my-keyring/cryptoKeys/cosign-key"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/M-Samii/microservices-demo.git'
            }
        }

        stage('Secret Scan with TruffleHog') {
            steps {
                script {
                    echo "üîë Running TruffleHog to scan for secrets in the repository"
                    def exitCode = sh(
                        script: """
                            docker run --rm -v \$(pwd):/repo trufflesecurity/trufflehog:latest filesystem /repo --fail
                        """,
                        returnStatus: true
                    )
                    if (exitCode != 0) {
                        error "‚ùå TruffleHog detected secrets in the repository. Failing the build."
                    } else {
                        echo "‚úÖ No secrets detected by TruffleHog."
                    }
                }
            }
        }

        stage('Snyk Scan') {
            steps {
                script {
                    echo "üîç Running Snyk to scan for vulnerabilities and license violations"
                    def exitCode = sh(
                        script: """
                            docker run --rm -e SNYK_TOKEN=${SNYK_TOKEN} -v \$(pwd):/project snyk/snyk-cli:docker test --all-projects --severity-threshold=high --fail-on=all
                        """,
                        returnStatus: true
                    )
                    if (exitCode != 0) {
                        error "‚ùå Snyk detected vulnerabilities, license violations, or authentication issues. Failing the build."
                    } else {
                        echo "‚úÖ No critical/high vulnerabilities or license issues detected by Snyk."
                    }
                }
            }
        }

        stage('Build, Scan, Sign, and Push') {
            steps {
                script {
                    def changedFiles = sh(
                        script: "git diff --name-only HEAD~1 HEAD",
                        returnStdout: true
                    ).trim().split("\n")

                    def services = []
                    for (file in changedFiles) {
                        if (file.startsWith("src/")) {
                            def parts = file.split("/")
                            if (parts.length >= 2) {
                                def service = parts[1]
                                if (!services.contains(service)) {
                                    services.add(service)
                                }
                            }
                        }
                    }

                    if (services.size() == 0) {
                        echo "‚úÖ No services were changed in the last commit. Skipping build."
                    } else {
                        echo "üõ†Ô∏è Changed services to process: ${services}"

                        withCredentials([usernamePassword(credentialsId: 'dockerhub-credentials', usernameVariable: 'COSIGN_DOCKER_USERNAME', passwordVariable: 'COSIGN_PASSWORD')]) {
                            
                            sh """
                                echo "${COSIGN_PASSWORD}" | docker login -u "${COSIGN_DOCKER_USERNAME}" --password-stdin
                            """

                            for (service in services) {
                                def buildContext = (service == "cartservice") ? "src/cartservice/src" : "src/${service}"
                                def imageName = "${DOCKERHUB_REPO}/${service.toLowerCase()}:latest"

                                echo "üöÄ Building image: ${imageName}"
                                sh "docker build -t ${imageName} ${buildContext}"

                                echo "üîç Trivy scan for ${imageName}"
                                sh """
                                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL ${imageName}
                                    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 1 --severity CRITICAL ${imageName}
                                """

                                echo "üîè Signing ${imageName} with Cosign"
                                sh """
                                    cosign sign -y --key gcpkms://${COSIGN_KEY} ${imageName}
                                """

                                echo "üîê Verifying signature of ${imageName}"
                                sh """
                                    cosign verify --key gcpkms://${COSIGN_KEY} ${imageName}
                                """

                                echo "üì¶ Pushing signed image: ${imageName}"
                                sh "docker push ${imageName}"
                            }

                            // Logout from Docker Hub
                            sh "docker logout"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up workspace"
            cleanWs()
        }
    }
}
