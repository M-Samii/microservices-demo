pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-credentials')
        DOCKERHUB_REPO = "mahsamii"
        SNYK_TOKEN = credentials('snyk-token')  

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/M-Samii/microservices-demo.git'
            }
        }

        stage('Secret Scan with TruffleHog') {
            steps {
                script {
                    echo "üîë Running TruffleHog to scan for secrets in the repository"
                    def exitCode = sh(
                        script: """
                            docker run --rm -v \$(pwd):/repo trufflesecurity/trufflehog:latest filesystem /repo --fail
                        """,
                        returnStatus: true
                    )

                    if (exitCode != 0) {
                        error "‚ùå TruffleHog detected secrets in the repository. Failing the build."
                    } else {
                        echo "‚úÖ No secrets detected by TruffleHog."
                    }
                }
            }
        }

    stage('Snyk Scan') {
        steps {
            script {
                echo "üîç Running Snyk to scan for vulnerabilities and license violations"
    
                withCredentials([string(credentialsId: 'snyk-token', variable: 'SNYK_TOKEN')]) {
                    def exitCode = sh(
                        script: """
                            docker run --rm -e SNYK_TOKEN=\$SNYK_TOKEN -v \$(pwd):/project snyk/snyk-cli:docker test --all-projects --severity-threshold=high --fail-on=all
                        """,
                        returnStatus: true
                    )
    
                    if (exitCode != 0) {
                        error "‚ùå Snyk detected vulnerabilities, license violations, or authentication issues. Failing the build."
                    } else {
                        echo "‚úÖ No critical/high vulnerabilities or license issues detected by Snyk."
                    }
                }
            }
        }
    }

        stage('Build, Scan, and Push Changed Services') {
            steps {
                script {
                    // Get changed files in the last commit
                    def changedFiles = sh(
                        script: "git diff --name-only HEAD~1 HEAD",
                        returnStdout: true
                    ).trim().split("\n")

                    // Identify unique services that were updated
                    def services = []
                    for (file in changedFiles) {
                        if (file.startsWith("src/")) {
                            def parts = file.split("/")
                            if (parts.length >= 2) {
                                def service = parts[1]
                                if (!services.contains(service)) {
                                    services.add(service)
                                }
                            }
                        }
                    }

                    if (services.size() == 0) {
                        echo "‚úÖ No services were changed in the last commit. Skipping build."
                    } else {
                        for (service in services) {
                            def buildContext = (service == "cartservice") ? "src/cartservice/src" : "src/${service}"
                            def imageName = "${DOCKERHUB_REPO}/${service.toLowerCase()}:latest"
                            echo "üöÄ Building and scanning ${imageName}"

                            sh """
                                docker build -t ${imageName} ${buildContext}
                            """

                            echo "üîç Running Trivy scan on ${imageName}"
                            sh """
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL ${imageName}
                                docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image --exit-code 1 --severity CRITICAL ${imageName}
                            """

                            sh """
                                echo "${DOCKERHUB_CREDENTIALS_PSW}" | docker login -u "${DOCKERHUB_CREDENTIALS_USR}" --password-stdin
                                docker push ${imageName}
                                docker logout
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up workspace"
            cleanWs()
        }
    }
}
